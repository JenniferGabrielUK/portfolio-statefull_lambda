// portfolio-stateful-lambda.cpp : This file contains the 'main' function. Program execution begins and ends there.
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

int global_x(1000);
std::string global_y{ "Jenny" };

void test1() {
    std::cout << "\nTest1===================" << std::endl;
    int local_x{ 100 };
    auto l = [local_x]() {
        std::cout << local_x << std::endl;
        std::cout << global_x << std::endl;
    };
    l();
    std::string local_y {"x"};
    auto l1 = [local_y]() {
        std::cout << local_y << std::endl;
        std::cout << global_y << std::endl;
    };
    l1();
}

void test2() {
    std::cout << "\nTest2====================" << std::endl;
    int x{ 100 };
    auto l = [x]() mutable {
        x += 100;
        std::cout << x << std::endl;
    };
    l();
    std::cout << x << std::endl;
    l();
    std::cout << x << std::endl;
    l();
    std::cout << x << std::endl;
    l();
    std::cout << x << std::endl;
    l();
    std::cout << x << std::endl;
    auto l1 = [x]() mutable {
        x *= 10;
        std::cout << x << std::endl;
    };
    l1();
    std::cout << x << std::endl;
    l1();
    std::cout << x << std::endl;
    l1();
    std::cout << x << std::endl;
    l1();
    std::cout << x << std::endl;
    l1();
    std::cout << x << std::endl;
}

void test3() {
   std::cout << "\nTet3======================" << std::endl;
    int x{ 100 };
    auto l = [&x]() mutable {
        x += 100;
        std::cout << x << std::endl;
    };
    l();
    std::cout << x << std::endl;
    l();
    std::cout << x << std::endl;
    l();
    std::cout << x << std::endl;
    l();
    std::cout << x << std::endl;
}

void test4() {
    std::cout << "\nTest4======================" << std::endl;
    int x{ 100 };
    int y{ 200 };
    int z{ 300 };
    auto l = [=]() mutable { //may cause a compiler warning as not all variables are used in the lambda body, visual studio 2021 however does not produce any warnings.
        x += 100;
        y += 100;
        std::cout << x << std::endl;
        std::cout << y << std::endl;
    };
    l();
    std::cout << "\n";
    std::cout << x << std::endl;
    std::cout << y << std::endl;
    std::cout << z << std::endl;
    auto l1 = [=]() mutable {
        x += 100;
        y += 200;
        z += 300;
        std::cout << "\n";
        std::cout << x << std::endl;
        std::cout << y << std::endl;
        std::cout << z << std::endl;
    };
    l1();
    std::cout << "\n";
    std::cout << x << std::endl;
    std::cout << y << std::endl;
    std::cout << z << std::endl;
}

void test5() {
    std::cout << "\nTest5======================" << std::endl;
    int x{ 100 };
    int y{ 200 };
    int z{ 300 };
    std::cout << "\nLocal Varaibles before lambda capture by reference." << std::endl;
    std::cout << "\n";
    std::cout << x << std::endl;
    std::cout << y << std::endl;
    std::cout << z << std::endl;
    auto l = [&]() mutable {
        x += 100;
        y += 100;
        z += 100;
        std::cout << "\n";
        std::cout << x << std::endl;
        std::cout << y << std::endl;
        std::cout << z << std::endl;
    };
    l();
    std::cout << "\nLocal Varaibles have now changed due to lambda capture by reference." << std::endl;
    std::cout << "\n";
    std::cout << x << std::endl;
    std::cout << y << std::endl;
    std::cout << z << std::endl;
}

int main()
{
    test1();
    test2();
    test3();
    test4();
    test5();
    return 0;
}

